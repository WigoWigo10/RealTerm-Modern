// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Library Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 26/09/2025 19:56:52 (- $Rev: 12980 $, 817877796).

[
  uuid(2130F380-39E1-11D7-BA0F-00E018852F5E), 
  version(1.0), 
  helpstring("Realterm Library")
    
]
library Realterm
{

  importlib("stdole2.tlb");

  interface IRealtermIntf;
  dispinterface IRealtermIntfEvents;
  coclass RealtermIntf;


  [
    uuid(E784A621-479F-11D5-BA0C-0000E108B24C), 
    version(1.0)
  ]
  enum EnumCaptureMode
  {
    [readonly, source]
    cmOff = 0, 
    [readonly, source]
    cmOn = 1, 
    [readonly, source]
    cmAppend = 2
  };

  [
    uuid(E784A623-479F-11D5-BA0C-0000E108B24C), 
    version(1.0)
  ]
  enum EnumWindowState
  {
    [bindable]
    wsNormal = 0, 
    [bindable]
    wsMinimized = 1, 
    [bindable]
    wsMaximized = 2
  };

  [
    uuid(BBACFE20-485E-11D5-BA0C-0000E108B24C), 
    version(1.0), 
    helpstring("Units that are used for setting CaptureSize property")
  ]
  enum EnumUnits
  {
    [readonly, bindable]
    Bytes = 0, 
    [readonly, bindable]
    Secs = 1
  };

  [
    uuid(2130F381-39E1-11D7-BA0F-00E018852F5E), 
    version(1.0), 
    helpstring("Dispatch interface for RealtermIntf Object"), 
    hidden, 
    dual, 
    oleautomation
  ]
  interface IRealtermIntf: IDispatch
  {
    [propget, id(0x00000001), helpstring("sets period (in ms) for periodic callbacks")]
    HRESULT _stdcall TimerPeriod([out, retval] long* TimerPeriod);
    [propput, id(0x00000001), helpstring("sets period (in ms) for periodic callbacks")]
    HRESULT _stdcall TimerPeriod([in] long TimerPeriod);
    [propget, id(0x00000002)]
    HRESULT _stdcall EnableTimerCallbacks([out, retval] VARIANT_BOOL* EnableTimerCallbacks);
    [propput, id(0x00000002)]
    HRESULT _stdcall EnableTimerCallbacks([in] VARIANT_BOOL EnableTimerCallbacks);
    [propget, id(0x00000003), helpstring("Sets the name of the capture file")]
    HRESULT _stdcall CaptureFile([out, retval] BSTR* CaptureFile);
    [propput, id(0x00000003), helpstring("Sets the name of the capture file")]
    HRESULT _stdcall CaptureFile([in] BSTR CaptureFile);
    [propget, id(0x00000004), helpstring("Start/stop capturing. set \"Capture File\" first")]
    HRESULT _stdcall Capture([out, retval] enum EnumCaptureMode* Capture);
    [propput, id(0x00000004), helpstring("Start/stop capturing. set \"Capture File\" first")]
    HRESULT _stdcall Capture([in] enum EnumCaptureMode Capture);
    [propget, id(0x00000005)]
    HRESULT _stdcall baud([out, retval] long* baud);
    [propput, id(0x00000005)]
    HRESULT _stdcall baud([in] long baud);
    [propget, id(0x00000006), helpstring("Physical ComPort# (eg \"1\") or ip_address:port or server:port (port can be service name eg \"telnet\")   eg \"192.168.0.102:23\" or \"server:telnet\" or \"server:9876\"")]
    HRESULT _stdcall Port([out, retval] BSTR* Port);
    [propput, id(0x00000006), helpstring("Physical ComPort# (eg \"1\") or ip_address:port or server:port (port can be service name eg \"telnet\")   eg \"192.168.0.102:23\" or \"server:telnet\" or \"server:9876\"")]
    HRESULT _stdcall Port([in] BSTR Port);
    [propget, id(0x00000007)]
    HRESULT _stdcall PortOpen([out, retval] VARIANT_BOOL* PortOpen);
    [propput, id(0x00000007)]
    HRESULT _stdcall PortOpen([in] VARIANT_BOOL PortOpen);
    [propget, id(0x00000008), helpstring("causes a callback every ? counts if >0")]
    HRESULT _stdcall CaptureCountForCallback([out, retval] long* CaptureCountForCallback);
    [propput, id(0x00000008), helpstring("causes a callback every ? counts if >0")]
    HRESULT _stdcall CaptureCountForCallback([in] long CaptureCountForCallback);
    [propget, id(0x00000009)]
    HRESULT _stdcall EnableCaptureCallbacks([out, retval] VARIANT_BOOL* EnableCaptureCallbacks);
    [propput, id(0x00000009)]
    HRESULT _stdcall EnableCaptureCallbacks([in] VARIANT_BOOL EnableCaptureCallbacks);
    [id(0x0000000A), helpstring("closes Realterm")]
    HRESULT _stdcall Close(void);
    [id(0x0000000B)]
    HRESULT _stdcall StartCapture(void);
    [id(0x0000000C)]
    HRESULT _stdcall StartCaptureAppend(void);
    [id(0x0000000D)]
    HRESULT _stdcall StopCapture(void);
    [propget, id(0x0000000E), helpstring("Number of chars in a (binary) data frame. Negtive for single-frame")]
    HRESULT _stdcall FrameSize([out, retval] long* FrameSize);
    [propput, id(0x0000000E), helpstring("Number of chars in a (binary) data frame. Negtive for single-frame")]
    HRESULT _stdcall FrameSize([in] long FrameSize);
    [propget, id(0x0000000F), helpstring("sets the way Terminal displays the received chars")]
    HRESULT _stdcall DisplayAs([out, retval] long* DisplayAs);
    [propput, id(0x0000000F), helpstring("sets the way Terminal displays the received chars")]
    HRESULT _stdcall DisplayAs([in] long DisplayAs);
    [propget, id(0x00000010), helpstring("restarts from 0 when you start capture")]
    HRESULT _stdcall CharCount([out, retval] long* CharCount);
    [propput, id(0x00000010), helpstring("restarts from 0 when you start capture")]
    HRESULT _stdcall CharCount([in] long CharCount);
    [propget, id(0x00000011), helpstring("Characters Per Second in received stream")]
    HRESULT _stdcall CPS([out, retval] long* CPS);
    [propput, id(0x00000011), helpstring("Characters Per Second in received stream")]
    HRESULT _stdcall CPS([in] long CPS);
    [propget, id(0x00000012)]
    HRESULT _stdcall WindowState([out, retval] enum EnumWindowState* WindowState);
    [propput, id(0x00000012)]
    HRESULT _stdcall WindowState([in] enum EnumWindowState WindowState);
    [propget, id(0x00000013), helpstring("changes the window title")]
    HRESULT _stdcall Caption([out, retval] BSTR* Caption);
    [propput, id(0x00000013), helpstring("changes the window title")]
    HRESULT _stdcall Caption([in] BSTR Caption);
    [propget, id(0x00000014)]
    HRESULT _stdcall Visible([out, retval] VARIANT_BOOL* Visible);
    [propput, id(0x00000014)]
    HRESULT _stdcall Visible([in] VARIANT_BOOL Visible);
    [propget, id(0x00000015), helpstring("#chars to capture or #seconds depending on CaptureEndUnits(0=indefinite)")]
    HRESULT _stdcall CaptureEnd([out, retval] long* CaptureEnd);
    [propput, id(0x00000015), helpstring("#chars to capture or #seconds depending on CaptureEndUnits(0=indefinite)")]
    HRESULT _stdcall CaptureEnd([in] long CaptureEnd);
    [propget, id(0x00000017), helpstring("sets the units that capture ends on: secs or bytes")]
    HRESULT _stdcall CaptureEndUnits([out, retval] enum EnumUnits* CaptureEndUnits);
    [propput, id(0x00000017), helpstring("sets the units that capture ends on: secs or bytes")]
    HRESULT _stdcall CaptureEndUnits([in] enum EnumUnits CaptureEndUnits);
    [id(0x00000016), helpstring("Send a string out the port")]
    HRESULT _stdcall PutString([in] BSTR S);
    [id(0x00000019), helpstring("true if able to find a tab sheet with matching caption. (case independent)")]
    HRESULT _stdcall SelectTabSheet([in] BSTR TabCaption, [out, retval] VARIANT_BOOL* result);
    [id(0x00000018), helpstring("returns DiskfreeSpace in bytes for drive N; Not exact for large disks as it uses double not int64. Convenience interface to DiskSpaceKludge function")]
    HRESULT _stdcall DiskFree([in] long Drive, [out, retval] double* result);
    [propget, id(0x0000001A), helpstring("Time left in capture. When captureend is capturesize, then it will be an approximation based on CPS")]
    HRESULT _stdcall CaptureTimeLeft([out, retval] long* CaptureTimeLeft);
    [id(0x0000001B), helpstring("put a single byte out. (exists because can't get zeros into putstring from matlab- this is a windows/null terminated string problem)")]
    HRESULT _stdcall PutChar([in] unsigned char C);
    [propget, id(0x0000001C), helpstring("Enables the tray icon. Normally used with the visible property to hide scap")]
    HRESULT _stdcall TrayIconActive([out, retval] VARIANT_BOOL* TrayIconActive);
    [propput, id(0x0000001C), helpstring("Enables the tray icon. Normally used with the visible property to hide scap")]
    HRESULT _stdcall TrayIconActive([in] VARIANT_BOOL TrayIconActive);
    [id(0x0000001D), helpstring("returns the total disk size (convenience function)")]
    HRESULT _stdcall DiskSize([in] long Drive, [out, retval] double* result);
    [propget, id(0x0000001E), helpstring("sets endian-ness when DisplayAs is a 16bit format")]
    HRESULT _stdcall BigEndian([out, retval] VARIANT_BOOL* BigEndian);
    [propput, id(0x0000001E), helpstring("sets endian-ness when DisplayAs is a 16bit format")]
    HRESULT _stdcall BigEndian([in] VARIANT_BOOL BigEndian);
    [propget, id(0x0000001F), helpstring("Port used to echo chars to/from main port. Most often a telnet server port e.g. \"server:telnet\" or \"server:8023\", but can be a physical comport")]
    HRESULT _stdcall EchoPort([out, retval] BSTR* EchoPort);
    [propput, id(0x0000001F), helpstring("Port used to echo chars to/from main port. Most often a telnet server port e.g. \"server:telnet\" or \"server:8023\", but can be a physical comport")]
    HRESULT _stdcall EchoPort([in] BSTR EchoPort);
    [propget, id(0x00000020), helpstring("Opens the EchoPort.")]
    HRESULT _stdcall EchoPortOpen([out, retval] VARIANT_BOOL* EchoPortOpen);
    [propput, id(0x00000020), helpstring("Opens the EchoPort.")]
    HRESULT _stdcall EchoPortOpen([in] VARIANT_BOOL EchoPortOpen);
    [propget, id(0x00000021)]
    HRESULT _stdcall HalfDuplex([out, retval] VARIANT_BOOL* HalfDuplex);
    [propput, id(0x00000021)]
    HRESULT _stdcall HalfDuplex([in] VARIANT_BOOL HalfDuplex);
    [propget, id(0x00000022), helpstring("Hides all controls and expands terminal to full screen")]
    HRESULT _stdcall HideControls([out, retval] VARIANT_BOOL* HideControls);
    [propput, id(0x00000022), helpstring("Hides all controls and expands terminal to full screen")]
    HRESULT _stdcall HideControls([in] VARIANT_BOOL HideControls);
    [propget, id(0x00000023), helpstring("Parity can be N,E,O,M,S or None,Odd,Even,Mark,Space")]
    HRESULT _stdcall Parity([out, retval] BSTR* Parity);
    [propput, id(0x00000023), helpstring("Parity can be N,E,O,M,S or None,Odd,Even,Mark,Space")]
    HRESULT _stdcall Parity([in] BSTR Parity);
    [propget, id(0x00000024)]
    HRESULT _stdcall DataBits([out, retval] long* DataBits);
    [propput, id(0x00000024)]
    HRESULT _stdcall DataBits([in] long DataBits);
    [propget, id(0x00000025)]
    HRESULT _stdcall StopBits([out, retval] long* StopBits);
    [propput, id(0x00000025)]
    HRESULT _stdcall StopBits([in] long StopBits);
    [propget, id(0x00000026)]
    HRESULT _stdcall EchoBaud([out, retval] long* EchoBaud);
    [propput, id(0x00000026)]
    HRESULT _stdcall EchoBaud([in] long EchoBaud);
    [propget, id(0x00000027)]
    HRESULT _stdcall EchoParity([out, retval] BSTR* EchoParity);
    [propput, id(0x00000027)]
    HRESULT _stdcall EchoParity([in] BSTR EchoParity);
    [propget, id(0x00000028)]
    HRESULT _stdcall EchoDataBits([out, retval] long* EchoDataBits);
    [propput, id(0x00000028)]
    HRESULT _stdcall EchoDataBits([in] long EchoDataBits);
    [propget, id(0x00000029)]
    HRESULT _stdcall EchoStopBits([out, retval] long* EchoStopBits);
    [propput, id(0x00000029)]
    HRESULT _stdcall EchoStopBits([in] long EchoStopBits);
    [propget, id(0x0000002A), helpstring("Item index of the flow control radio group ie 0-3")]
    HRESULT _stdcall FlowControl([out, retval] long* FlowControl);
    [propput, id(0x0000002A), helpstring("Item index of the flow control radio group ie 0-3")]
    HRESULT _stdcall FlowControl([in] long FlowControl);
    [propget, id(0x0000002B)]
    HRESULT _stdcall EchoFlowControl([out, retval] long* EchoFlowControl);
    [propput, id(0x0000002B)]
    HRESULT _stdcall EchoFlowControl([in] long EchoFlowControl);
    [propget, id(0x0000002C), helpstring("ms delay after each char sent")]
    HRESULT _stdcall CharDelay([out, retval] long* CharDelay);
    [propput, id(0x0000002C), helpstring("ms delay after each char sent")]
    HRESULT _stdcall CharDelay([in] long CharDelay);
    [propget, id(0x0000002D), helpstring("delay in ms after each EOL sent")]
    HRESULT _stdcall LineDelay([out, retval] long* LineDelay);
    [propput, id(0x0000002D), helpstring("delay in ms after each EOL sent")]
    HRESULT _stdcall LineDelay([in] long LineDelay);
    [propget, id(0x0000002E), helpstring("Display rows")]
    HRESULT _stdcall Rows([out, retval] long* Rows);
    [propput, id(0x0000002E), helpstring("Display rows")]
    HRESULT _stdcall Rows([in] long Rows);
    [propget, id(0x0000002F), helpstring("delay between sends of file in ms")]
    HRESULT _stdcall SendFileDelay([out, retval] long* SendFileDelay);
    [propput, id(0x0000002F), helpstring("delay between sends of file in ms")]
    HRESULT _stdcall SendFileDelay([in] long SendFileDelay);
    [propget, id(0x00000030), helpstring("number of times to repeat send file (0=endless)")]
    HRESULT _stdcall SendFileRepeats([out, retval] long* SendFileRepeats);
    [propput, id(0x00000030), helpstring("number of times to repeat send file (0=endless)")]
    HRESULT _stdcall SendFileRepeats([in] long SendFileRepeats);
    [propget, id(0x00000031), helpstring("Sets the name of the send file")]
    HRESULT _stdcall SendFile([out, retval] BSTR* SendFile);
    [propput, id(0x00000031), helpstring("Sets the name of the send file")]
    HRESULT _stdcall SendFile([in] BSTR SendFile);
    [propget, id(0x00000032), helpstring("start/stop file send")]
    HRESULT _stdcall Send([out, retval] VARIANT_BOOL* Send);
    [propput, id(0x00000032), helpstring("start/stop file send")]
    HRESULT _stdcall Send([in] VARIANT_BOOL Send);
    [id(0x00000033), helpstring("Clears the terminal screen")]
    HRESULT _stdcall ClearTerminal(void);
    [propget, id(0x00000034), helpstring("turns on monitor mode")]
    HRESULT _stdcall MonitorOn([out, retval] VARIANT_BOOL* MonitorOn);
    [propput, id(0x00000034), helpstring("turns on monitor mode")]
    HRESULT _stdcall MonitorOn([in] VARIANT_BOOL MonitorOn);
    [propget, id(0x00000035)]
    HRESULT _stdcall LinefeedIsNewline([out, retval] VARIANT_BOOL* LinefeedIsNewline);
    [propput, id(0x00000035)]
    HRESULT _stdcall LinefeedIsNewline([in] VARIANT_BOOL LinefeedIsNewline);
    [id(0x00000036), helpstring("moves terminal to a new line. Same as \\n button")]
    HRESULT _stdcall NewlineTerminal(void);
    [propget, id(0x00000037), helpstring("Control the RTS pin if not used by handshaking")]
    HRESULT _stdcall RTS([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000037), helpstring("Control the RTS pin if not used by handshaking")]
    HRESULT _stdcall RTS([in] VARIANT_BOOL Value);
    [propget, id(0x00000038), helpstring("Control the DTR pin if not used by handshaking")]
    HRESULT _stdcall DTR([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000038), helpstring("Control the DTR pin if not used by handshaking")]
    HRESULT _stdcall DTR([in] VARIANT_BOOL Value);
    [propget, id(0x00000039)]
    HRESULT _stdcall CaptureDirect([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000039)]
    HRESULT _stdcall CaptureDirect([in] VARIANT_BOOL Value);
    [id(0x0000003A), helpstring("Adds a string to one of the Sendstring comboboxes. Each time  it pushes existing strings down the combobox. ControlNum 0=IAddress, 1=SendCombo1, 2=SendCombo2")]
    HRESULT _stdcall AddCannedSendString([in] BSTR SendString, [in, defaultvalue(1)] long ControlNum, [out, retval] VARIANT_BOOL* result);
    [propget, id(0x0000003B)]
    HRESULT _stdcall Version([out, retval] BSTR* Value);
    [id(0x000000C9), helpstring("Selects capture Timestamp mode and delimiter. Set to 0, comma for no timestamp")]
    HRESULT _stdcall TimeStamp([in] long Style, [in, optional, defaultvalue(44)] unsigned char Delimiter);
    [id(0x000000CA)]
    HRESULT _stdcall EnableDataTrigger([in, optional, defaultvalue(1)] long Index);
    [id(0x000000CB)]
    HRESULT _stdcall DisableDataTrigger([in, optional, defaultvalue(1)] long Index);
    [id(0x000000CC)]
    HRESULT _stdcall WaitforDataTrigger([in] long Timeout, [out, retval] BSTR* DataStr);
    [propget, id(0x000000CD), helpstring("Makes capture file be written as hexadecimal values")]
    HRESULT _stdcall CaptureAsHex([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CD), helpstring("Makes capture file be written as hexadecimal values")]
    HRESULT _stdcall CaptureAsHex([in] VARIANT_BOOL Value);
    [id(0x000000CE), helpstring("Setup Data Trigger packets")]
    HRESULT _stdcall DataTriggerSet([in, defaultvalue(1)] long Index, [in, defaultvalue("")] BSTR StartString, [in, defaultvalue("^J")] BSTR EndString, [in, defaultvalue(0)] long PacketSIze, [in, defaultvalue(110)] long Timeout, [in, defaultvalue(False)] VARIANT_BOOL AutoEnable, [in, defaultvalue(False)] VARIANT_BOOL IgnoreCase, [in, defaultvalue(False)] VARIANT_BOOL IncludeStrings);
  };

  [
    uuid(2130F382-39E1-11D7-BA0F-00E018852F5E), 
    version(1.0)
  ]
  dispinterface IRealtermIntfEvents
  {
    properties:
    methods:
    [id(0x00000001)]
    void OnTimer(void);
    [id(0x00000002)]
    void OnCaptureCount(void);
    [id(0x00000003)]
    void OnCaptureStop(void);
    [id(0x000000C9)]
    HRESULT OnDataTrigger([in] long Index, [in] VARIANT_BOOL Timeout, [in] VARIANT Data, [in] long Size, [in] VARIANT_BOOL Reenable);
  };

  [
    uuid(2130F383-39E1-11D7-BA0F-00E018852F5E), 
    version(1.0), 
    helpstring("RealtermIntfObject")
  ]
  coclass RealtermIntf
  {
    [default] interface IRealtermIntf;
    [default, source] dispinterface IRealtermIntfEvents;
  };

};